name: Build

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  
  build-app:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    steps:
    - uses: actions/checkout@v4

    - name: Build app
      run: docker build --target komunitin-app-build --tag komunitin-app-build .

    - name: Linter
      run: docker run --rm komunitin-app-build npm run lint

    - name: Tests
      run: docker run --rm komunitin-app-build npm run test
    
    - name: Build production
      run: docker build --tag komunitin/komunitin-app .
    
    - name: Publish to Docker Hub
      if: github.ref == 'refs/heads/master'
      run: |
        docker login -u komunitin -p ${{ secrets.DOCKER_PASS }}
        docker push komunitin/komunitin-app
  
  build-notifications:
  
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./notifications

    steps:
    - uses: actions/checkout@v4

    - name: Build notifications service
      run: docker build --target notifications-build --tag komunitin-notifications-build .

    - name: Run the tests
      run: docker run --rm komunitin-notifications-build go test ./...
    
    - name: Build production
      run: docker build --tag komunitin/komunitin-notifications .

    - name: Publish to Docker Hub
      if: github.ref == 'refs/heads/master'
      run: |
        docker login -u komunitin -p ${{ secrets.DOCKER_PASS }}
        docker push komunitin/komunitin-notifications

  build-accounting:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./accounting
    steps:
    - uses: actions/checkout@v4

    - name: Test accounting
      shell: bash
      run: cp .env.test .env && docker compose up -d

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - uses: pnpm/action-setup@v4
      name: Install pnpm
      with:
        version: latest
    
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - uses: actions/cache@v4
      name: Setup pnpm cache
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install

    - name: Run tests
      run: pnpm test

    - name: Build docker images
      run: |
        docker build --tag komunitin/komunitin-accounting .
        docker build --tag komunitin/komunitin-db-accounting ./docker/db
    
    - name: Publish to Docker Hub
      if: github.ref == 'refs/heads/master'
      run: |
        docker login -u komunitin -p ${{ secrets.DOCKER_PASS }}
        docker push komunitin/komunitin-accounting
        docker push komunitin/komunitin-db-accounting

  update-server:
    runs-on: ubuntu-latest
    needs: [build-app, build-notifications, build-accounting]
    steps:
    - uses: actions/checkout@v4

    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.TEST_DEPLOY_SSH_PRIVATE_KEY }} 
        known_hosts: 'will-be-set-now'
    - name: Deploy demo.komunitin.org
      if: github.ref == 'refs/heads/master'
# This ssh options keep the connection alive for 15 minutes even if there is no activity
# due to long compilation times.
      run: > 
        ssh-keyscan -H demo.komunitin.org >> ~/.ssh/known_hosts &&
        ssh -o ServerAliveInterval=180 -o ServerAliveCountMax=5 deploy@demo.komunitin.org 
        "cd /opt/demo.komunitin.org
        && cd ices && git pull && cd ..
        && cd komunitin && git pull
        && docker compose down -v --remove-orphans
        && ./start.sh --up --ices --demo --public"
    - name: Deploy preview.komunitin.org
      if: github.event_name == 'pull_request'
      run: > 
        ssh-keyscan -H preview.komunitin.org >> ~/.ssh/known_hosts &&
        ssh -o ServerAliveInterval=180 -o ServerAliveCountMax=5 deploy@preview.komunitin.org
        "cd /opt/preview.komunitin.org
        && cd ices && git pull && cd ..
        && cd komunitin && git fetch origin && git checkout origin/${{ github.head_ref }}
        && docker compose down -v --remove-orphans
        && ./start.sh --up --ices --demo --public"
    