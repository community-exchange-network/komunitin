// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package i18n

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p, ok := messageKeyToIndex[key]
	if !ok {
		return "", false
	}
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"ca": &dictionary{index: caIndex, data: caData},
		"en": &dictionary{index: enIndex, data: enData},
		"es": &dictionary{index: esIndex, data: esData},
	}
	fallback := language.MustParse("en-US")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"newPurchase":         0,
	"newPurchaseText":     1,
	"paymentReceived":     2,
	"paymentReceivedText": 3,
}

var caIndex = []uint32{ // 5 elements
	0x00000000, 0x0000000c, 0x00000025, 0x00000034,
	0x0000004e,
} // Size: 44 bytes

const caData string = "" + // Size: 78 bytes
	"\x02Nova compra\x02Compra de %[1]v a %[2]v.\x02Pagament rebut\x02Has reb" +
	"ut %[1]v de %[2]v."

var enIndex = []uint32{ // 5 elements
	0x00000000, 0x0000000d, 0x0000002b, 0x0000003c,
	0x00000062,
} // Size: 44 bytes

const enData string = "" + // Size: 98 bytes
	"\x02New purchase\x02Purchase of %[1]v from %[2]v.\x02Payment received" +
	"\x02Payment received of %[1]v from %[2]v."

var esIndex = []uint32{ // 5 elements
	0x00000000, 0x0000000d, 0x00000026, 0x00000034,
	0x00000051,
} // Size: 44 bytes

const esData string = "" + // Size: 81 bytes
	"\x02Nueva compra\x02Compra de %[1]v a %[2]v.\x02Pago recibido\x02Has rec" +
	"ibido %[1]v de %[2]v."

	// Total table size 389 bytes (0KiB); checksum: 2637B30D
