name: Build

on:
  push:
    branches:
      - master
  pull_request:

jobs:

  build-app:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    steps:
    - uses: actions/checkout@v4

    - name: Build app
      run: docker build --build-arg QENV=mirage --target komunitin-app-build --tag komunitin-app-build:mirage .

    - name: Linter
      run: docker run --rm komunitin-app-build:mirage npm run lint

    - name: Tests
      run: docker run --rm komunitin-app-build:mirage npm run test
    
    - name: Build production
      run: docker build --build-arg QENV=build --tag komunitin/komunitin-app .

    - name: Build demo
      run: docker build --build-arg QENV=demo --tag komunitin/komunitin-app:demo .
    
    - name: Run demo
      run: docker run -d -p 80:80 --rm komunitin/komunitin-app:demo
      
    - name: Check demo
      run: wget http://localhost/
    
    - name: Publish to Docker Hub
      if: github.ref == 'refs/heads/master'
      run: |
        docker login -u komunitin -p ${{ secrets.DOCKER_PASS }}
        docker push komunitin/komunitin-app
        docker push komunitin/komunitin-app:demo
  
  build-notifications:
  
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./notifications

    steps:
    - uses: actions/checkout@v4

    - name: Build notifications image
      run: docker build --tag komunitin/komunitin-notifications .

    - name: Publish to Docker Hub
      if: github.ref == 'refs/heads/master'
      run: |
        docker login -u komunitin -p ${{ secrets.DOCKER_PASS }}
        docker push komunitin/komunitin-notifications

  build-accounting:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./accounting
    steps:
    - uses: actions/checkout@v4

    - name: Test accounting
      shell: bash
      run: cp .env.test .env && docker compose up -d

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - uses: pnpm/action-setup@v4
      name: Install pnpm
      with:
        version: latest
    
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - uses: actions/cache@v4
      name: Setup pnpm cache
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install

    - name: Run tests
      run: pnpm test

  update-test:
    runs-on: ubuntu-latest
    needs: [build-app, build-notifications]
    if: github.ref == 'refs/heads/master'
    steps:
    - name: Update test.komunitin.org
      run: curl ${{ secrets.DEPLOY_WEBHOOK_URL }}

