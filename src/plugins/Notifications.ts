import { initializeApp } from "firebase/app";
import { getMessaging, getToken, MessagePayload, Messaging, onMessage } from "firebase/messaging"
import { KOptions } from "../boot/komunitin"
import axios from "axios";
import { onBackgroundMessage, getMessaging as getMessagingSW } from "firebase/messaging/sw";
import { NotificationsSubscription } from "src/store/model";

export class Notifications {
  
  // Firebase config object. Code autogenerated by Firebase console at
  // Project settings > General > Web app > SDK setup & configuration.
  // https://firebase.google.com/docs/web/setup#config-objectConfig
  private firebaseConfig = {
    apiKey: "AIzaSyBz8Rsnm1B3l5beoJnrBXjt51tbighCaF8",
    authDomain: "komunitin-project.firebaseapp.com",
    projectId: "komunitin-project",
    storageBucket: "komunitin-project.appspot.com",
    messagingSenderId: "990869913594",
    appId: "1:990869913594:web:2e38aa78fe6d27c8986e43",
    measurementId: "G-RYZMRW1QKC"
  };

  /**
   * @returns The Firebase Messaging class, to be called from the main thread.
   */
  private getMessaging() : Messaging {
    const app = initializeApp(this.firebaseConfig);
    const messaging = getMessaging(app);
    return messaging;
  }

  /**
   * 
   * @returns The Firebase Messaging class, to be called from a service worker. 
   */
  private getMessagingSW() : Messaging {
    const app = initializeApp(this.firebaseConfig);
    const messaging = getMessagingSW(app);
    return messaging;
  }

  /**
   * Subscribe the current device, user and member to push notifications.
  */
  public async subscribe(subscription: NotificationsSubscription): Promise<NotificationsSubscription> {
    // Initialize Firebase
    const messaging = this.getMessaging();
    const vapidKey = process.env.PUSH_SERVER_KEY;
    const serviceWorkerRegistration = await window.navigator.serviceWorker.getRegistration()
    try {
      // Get registration token. Initially this makes a network call, once retrieved
      // subsequent calls to getToken will return from cache.
      const token = await getToken(messaging, { 
        vapidKey,
        serviceWorkerRegistration
      });
      // Update token.
      subscription.attributes.token = token;
      // Send token to the server.
      const response = await axios.post<NotificationsSubscription>(KOptions.url.notifications + '/subscriptions', subscription);
      /**
       * Push Message handler.
       */
      onMessage(messaging, this.onMessage)

      return response.data

    } catch (err) {
      // The user doesn't grant the app to receive notifications.
      console.error('An error occurred while retrieving token. ', err);
      throw err;
    }
  }

  /**
   * To be called from service worker. Sets up the push message handler.
   */
  public receiveBackgroundMessages() {
    // Initialize Firebase
    const messaging = this.getMessagingSW();
    /**
     * Push Message handler.
     */
    onBackgroundMessage(messaging, this.onBackgroundMessage)
  }

  private onMessage(payload: MessagePayload) : void {
    console.log("Received foreground message.", payload);
  }

  private onBackgroundMessage(payload: MessagePayload) : void {
    console.log("Received background message.", payload);
  }
}